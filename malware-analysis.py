"""
Simple Malware Analysis Tool

Features:
- Computes file hashes (MD5, SHA1, SHA256)
- Reports file type and size
- Extracts printable strings from binary files
- Flags suspicious keywords (e.g., 'cmd.exe', 'powershell', 'http', etc.)

"""

import os
import sys
import hashlib
import string

SUSPICIOUS_KEYWORDS = [
    "cmd.exe", "powershell", "http", "https", "ftp", "nc.exe", "shell", "keylogger",
    "system32", "C:\\Windows", ".bat", ".vbs", "wget", "curl", "token", "password", "base64"
]

def get_file_type(filepath):
    try:
        import mimetypes
        filetype, _ = mimetypes.guess_type(filepath)
        if filetype:
            return filetype
        if os.name == 'posix':
            import subprocess
            output = subprocess.check_output(['file', filepath])
            return output.decode().strip()
    except Exception:
        pass
    return "Unknown"

def get_file_hashes(filepath):
    hashes = {'md5': None, 'sha1': None, 'sha256': None}
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    sha256 = hashlib.sha256()
    try:
        with open(filepath, 'rb') as f:
            while True:
                chunk = f.read(8192)
                if not chunk:
                    break
                md5.update(chunk)
                sha1.update(chunk)
                sha256.update(chunk)
        hashes['md5'] = md5.hexdigest()
        hashes['sha1'] = sha1.hexdigest()
        hashes['sha256'] = sha256.hexdigest()
    except Exception as e:
        print(f"Error computing hashes: {e}")
    return hashes

def extract_strings(filepath, min_length=4):
    with open(filepath, 'rb') as f:
        result = []
        current = ""
        for byte in f.read():
            char = chr(byte)
            if char in string.printable and char not in '\n\r\t\x0b\x0c':
                current += char
            else:
                if len(current) >= min_length:
                    result.append(current)
                current = ""
        if len(current) >= min_length:
            result.append(current)
    return result

def scan_for_keywords(strings):
    found = []
    for s in strings:
        for keyword in SUSPICIOUS_KEYWORDS:
            if keyword.lower() in s.lower():
                found.append((keyword, s))
    return found

def main():
    print("=== Simple Malware Analysis Tool ===")
    if len(sys.argv) < 2:
        print("Usage: python simple_malware_analysis.py <suspicious_file>")
        sys.exit(1)
    filepath = sys.argv[1]
    if not os.path.isfile(filepath):
        print("File not found.")
        sys.exit(1)

    print(f"File: {filepath}")
    print(f"Size: {os.path.getsize(filepath)} bytes")
    print(f"Type: {get_file_type(filepath)}")

    hashes = get_file_hashes(filepath)
    print("\nHashes:")
    for h, v in hashes.items():
        print(f"  {h.upper()}: {v}")

    print("\nExtracting printable strings...")
    strings = extract_strings(filepath)
    print(f"Found {len(strings)} strings (showing up to 20):")
    for s in strings[:20]:
        print(f"  {s}")

    print("\nScanning for suspicious keywords...")
    matches = scan_for_keywords(strings)
    if matches:
        for keyword, s in matches:
            print(f"  [!] Keyword '{keyword}' found in string: {s}")
    else:
        print("  No suspicious keywords found.")

    print("\nAnalysis complete.")

if __name__ == "__main__":
    main()